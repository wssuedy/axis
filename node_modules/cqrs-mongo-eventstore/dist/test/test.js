"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const Snap_1 = require("cqrs/dist/lib/Snap");
const Event_1 = require("cqrs/dist/lib/Event");
const Actor_1 = require("cqrs/dist/lib/Actor");
const assert_1 = require("assert");
require("mocha");
describe("mongo-eventstore", function () {
    let es;
    it("#create and init", async function () {
        es = new index_1.default("localhost/test");
        await es._clear_for_test(); // only test use!
    });
    let snapid;
    let user;
    it("#createSnap", async function () {
        user = new Actor_1.default({ name: "leo" });
        const snap = new Snap_1.default(user, 0, 1);
        const snap2 = new Snap_1.default(user, 1, 1);
        snapid = (await es.createSnap(snap)).id;
        await es.createSnap(snap2);
    });
    it("#getSnapshotById", async function () {
        const snap = await es.getSnapshotById(snapid);
        assert_1.ok(snap.id === snapid);
    });
    it("$getLatestSnapshot", async function () {
        const snap = await es.getLatestSnapshot(user.id);
        assert_1.ok(snap.index === 1);
    });
    it("#getSnapshotByIndex", async function () {
        const snap = await es.getSnapshotByIndex(user.id, 1);
        assert_1.ok(snap.index === 1);
    });
    let e1;
    it("#saveEvents", async function () {
        e1 = new Event_1.default(user, { name: "leo" }, "change", "change");
        const e2 = new Event_1.default(user, { name: "leo2" }, "change", "change");
        e1.index = 2;
        e2.index = 3;
        await es.saveEvents([e1, e2]);
    });
    it("#getEvents", async function () {
        const events = await es.getEvents(user.id);
        assert_1.ok(2 === events.length);
    });
    it("#getLatestEvent", async function () {
        const e = await es.getLatestEvent(user.id);
        assert_1.ok(e.index === 3);
    });
    it("#getEventsBySnapshot", async function () {
        const event = await es.getEventsBySnapshot(snapid);
        assert_1.ok(event.length === 2);
    });
    it("#getEventById", async function () {
        assert_1.ok(!!(await es.getEventById(e1.id)));
    });
    it("#beginSaga", async function () {
        const saga = await es.beginSaga("s001");
    });
    it("#getSaga", async function () {
        const saga = await es.getSaga("s001");
        assert_1.ok(saga.sagaId === "s001");
    });
    it("#existSaga", async function () {
        assert_1.ok(await es.existSaga("s001"));
    });
    it("#endSaga & findUndoneSaga", async function () {
        let saga = await es.getSaga("s001");
        let sagas = await es.findUndoneSaga();
        assert_1.ok(sagas.length === 1);
        await es.endSaga("s001");
        assert_1.ok(!saga.done);
        saga = await es.getSaga("s001");
        assert_1.ok(!saga);
        sagas = await es.findUndoneSaga();
        assert_1.ok(sagas.length === 0);
    });
});
//# sourceMappingURL=test.js.map