import Event from "cqrs/dist/lib/Event";
import Snap from "cqrs/dist/lib/Snap";
import { EventEmitter } from "events";
import EventStore from "cqrs/dist/lib/EventStore";
var { promisify } = require("util");
var mongo = require('then-mongo');

export default class MongoEventStore extends EventEmitter implements EventStore {
  private sagas;
  private events;
  private snaps;
  constructor(url, collectionNames = { sagas: "", events: "", snaps: "" }) {
    super();
    var db = mongo(url, [collectionNames.sagas || "sagas", collectionNames.sagas || "events", collectionNames.snaps || "snaps"]);
    this.sagas = db.sagas;
    this.events = db.events;
    this.snaps = db.snaps;
  }
  async existSaga(sagaId: string): Promise<boolean> {
    return !!await this.getSaga(sagaId);
  }

  async beginSaga(sagaId: string): Promise<any> {
    const exist = await this.existSaga(sagaId);
    if (!exist) {
      return this.sagas.insert({ sagaId, done: false, alive: true });
    }
  }

  async getSaga(sagaId: string): Promise<any> {
    return await this.sagas.findOne({ sagaId, alive: true });
  }

  async killSaga(sagaId: string) {
    return await this.sagas.update({ sagaId }, { alive: false });
  }

  async endSaga(sagaId): Promise<any> {
    const exist = await this.existSaga(sagaId);
    if (exist) {
      return await this.sagas.update({ sagaId }, { done: true });
    }
  }

  async findUndoneSaga(): Promise<string[]> {
    return await this.sagas.find({ done: false });
  }

  async createSnap(snap: Snap) {
    return await this.snaps.insert(snap.json);
  }

  async saveEvents(events: Event[] | Event) {
    events = [].concat(events);
    const eventsJSONArr = events.map(event => {
      return event.json || event;
    });
    await this.events.insert(eventsJSONArr);
    this.emit('saved events', events);
  }

  async getLatestSnapshot(actorId) {
    let data = await this.snaps.find({ actorId }).limit(1).sort({ index: -1, date: -1 });
    if (data && data[0]) {
      return Snap.parse(data[0]);
    }
  }

  async getEvents(actorId) {
    let events = await this.events.find({ actorId }).sort({ index: -1, date: -1 });
    return events.map(event => Event.parse(event));
  }

  async getLatestEvent(actorId) {
    let event = await this.events.find({ actorId }).sort({ index: -1, date: -1 }).limit(1);
    return event.length ? Event.parse(event[0]) : null;
  }

  async getEventsBySnapshot(snapId: string): Promise<any> {
    const snap = await this.getSnapshotById(snapId);
    if (snap) {
      let events = await this.events.find({
        actorId: snap.actorId,
        index: { '$gt': snap.latestEventIndex }
      }).sort({ date: 1, index: 1 });
      return events.map(event => Event.parse(event));
    }
  }

  async getSnapshotByIndex(actorId, index): Promise<Snap> {
    let snap = await this.snaps.findOne({ actorId, index });
    return Snap.parse(snap);
  }

  async getSnapshotByLastIndex(actorId, index) {
    // let snap = await this.getLatestSnapshot(actorId);
    // if (snap) {
    //     if (index === 0) {
    //         return snap;
    //     } else {
    //         return await this.getSnapshotByIndex(actorId, snap.index - index);
    //     }
    // }
  }

  async getSnapshotById(id) {
    let snap = await this.snaps.findOne({ id });
    return Snap.parse(snap);
  }

  async getEventById(id) {
    let event = await this.events.findOne({ id });
    if (event) {
      return Event.parse(event);
    } else {
      return null;
    }
  }

  async findEventsBySagaId(sagaId): Promise<Event[]> {
    let events = await this.events.find({ sagaId }).sort({ index: -1, date: -1 });
    return events.map(event => Event.parse(event));
  }

  async removeEventsBySagaId(sagaId: string) {
    await this.killSaga(sagaId);
    await this.events.remove({ sagaId });
  }

  async findFollowEvents(actorId: string, index: number): Promise<any> {
    let events = await this.events.find({ actorId, index: { $gt: index } }).sort({ index: 1, date: 1 });
    return events.map(event => Event.parse(event));
  }

  async _clear_for_test() {
    await this.snaps.remove();
    await this.events.remove();
    await this.sagas.remove();
  }

}
