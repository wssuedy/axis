import MongoEventStore from "../index";
import Snap from "cqrs/dist/lib/Snap";
import Event from "cqrs/dist/lib/Event";
import Actor from "cqrs/dist/lib/Actor";
import { ok } from "assert";
import "mocha";

describe("mongo-eventstore", function () {

    let es: MongoEventStore;

    it("#create and init", async function () {
        es = new MongoEventStore("localhost/test");
        await es._clear_for_test(); // only test use!
    })

    let snapid;
    let user;
    it("#createSnap", async function () {
        user = new Actor({ name: "leo" });
        const snap = new Snap(user, 0, 1);
        const snap2 = new Snap(user, 1, 1);
        snapid = (await es.createSnap(snap)).id;
        await es.createSnap(snap2);
    })

    it("#getSnapshotById", async function () {
        const snap = await es.getSnapshotById(snapid);
        ok(snap.id === snapid);
    });

    it("$getLatestSnapshot", async function () {
        const snap = await es.getLatestSnapshot(user.id);
        ok(snap.index === 1);
    })

    it("#getSnapshotByIndex", async function () {
        const snap = await es.getSnapshotByIndex(user.id, 1);
        ok(snap.index === 1);

    });

    let e1;
    it("#saveEvents", async function () {

        e1 = new Event(user, { name: "leo" }, "change", "change");
        const e2 = new Event(user, { name: "leo2" }, "change", "change");
        e1.index = 2;

        e2.index = 3;
        await es.saveEvents([e1, e2]);
    });

    it("#getEvents", async function () {
        const events = await es.getEvents(user.id);
        ok(2 === events.length);
    })

    it("#getLatestEvent", async function () {
        const e = await es.getLatestEvent(user.id);
        ok(e.index === 3);
    })

    it("#getEventsBySnapshot", async function () {
        const event = await es.getEventsBySnapshot(snapid);
        ok(event.length === 2);
    });

    it("#getEventById", async function () {
        ok(!!(await es.getEventById(e1.id)));
    });

    it("#beginSaga", async function () {
        const saga = await es.beginSaga("s001");
    });

    it("#getSaga", async function () {
        const saga = await es.getSaga("s001");
        ok(saga.sagaId === "s001");
    });

    it("#existSaga", async function () {
        ok(await es.existSaga("s001"));
    });

    it("#endSaga & findUndoneSaga", async function () {
        let saga = await es.getSaga("s001");
        let sagas = await es.findUndoneSaga();
        ok(sagas.length === 1);
        await es.endSaga("s001");
        ok(!saga.done);
        saga = await es.getSaga("s001");
        ok(!saga);
        sagas = await es.findUndoneSaga();
        ok(sagas.length === 0);
    });




});
