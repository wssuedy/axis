/**
 * WARNING: This file is autogenerated by `build.js` from in `/schema/`database.js
 */

var Promise = require("promise");
var Collection = require("./collection");

module.exports = Database;
function Database(_parent) {
  this._parent = _parent;
  this.ObjectId = _parent.ObjectId;
}

Database.prototype.collection = function collection(colName) {
  return new Collection(this._parent.collection(colName));
};

Database.prototype.close = function close(force) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.close(force === undefined ? false : force, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.runCommand = function runCommand(command) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.runCommand(command, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.listCollections = function listCollections() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.listCollections(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.getCollectionNames = function getCollectionNames() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.getCollectionNames(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.createCollection = function createCollection(name, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.createCollection(name, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.stats = function stats(scale) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.stats(scale === undefined ? 1 : scale, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.dropDatabase = function dropDatabase() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.dropDatabase(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.createUser = function createUser(usr) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.createUser(usr, function (err, res) { err ? reject(err) : resolve(res) });
  });
};
Database.prototype.addUser = Database.prototype.createUser;

Database.prototype.dropUser = function dropUser(username) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.dropUser(username, function (err, res) { err ? reject(err) : resolve(res) });
  });
};
Database.prototype.removeUser = Database.prototype.dropUser;

Database.prototype.eval = function eval(fn) {
  var _parent = this._parent
  var _args = [];
  for (var i = 0; i < arguments.length; i++) {
    _args.push(arguments[i]);
  }
  return new Promise(function (resolve, reject) {
    _args.push(function (err, res) { err ? reject(err) : resolve(res) });
    _parent.eval.apply(_parent, _args);
  });
};

Database.prototype.getLastErrorObj = function getLastErrorObj() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.getLastErrorObj(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.getLastError = function getLastError() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.getLastError(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Database.prototype.toString = function toString() {
  return this._parent.toString();
};

Database.prototype._getConnection = function _getConnection() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent._getConnection(function (err, res) { err ? reject(err) : resolve(res) });
  });
};
Database.prototype.getConnection = Database.prototype._getConnection;

// Event Emitter

Database.prototype.addListener = function addListener() {
  return this._parent.addListener.apply(this._parent, arguments);
};

Database.prototype.emit = function emit() {
  return this._parent.emit.apply(this._parent, arguments);
};

Database.prototype.getMaxListeners = function getMaxListeners() {
  return this._parent.getMaxListeners.apply(this._parent, arguments);
};

Database.prototype.listenerCount = function listenerCount() {
  return this._parent.listenerCount.apply(this._parent, arguments);
};

Database.prototype.listeners = function listeners() {
  return this._parent.listeners.apply(this._parent, arguments);
};

Database.prototype.on = function on() {
  return this._parent.on.apply(this._parent, arguments);
};

Database.prototype.once = function once() {
  return this._parent.once.apply(this._parent, arguments);
};

Database.prototype.removeAllListeners = function removeAllListeners() {
  return this._parent.removeAllListeners.apply(this._parent, arguments);
};

Database.prototype.removeListener = function removeListener() {
  return this._parent.removeListener.apply(this._parent, arguments);
};

Database.prototype.setMaxListeners = function setMaxListeners() {
  return this._parent.setMaxListeners.apply(this._parent, arguments);
};
