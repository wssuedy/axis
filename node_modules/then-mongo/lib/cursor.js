/**
 * WARNING: This file is autogenerated by `build.js` from in `/schema/`cursor.js
 */

var Promise = require("promise");

module.exports = Cursor;
function Cursor(_parent) {
  this._parent = _parent;
  this._promise = null;
}

Cursor.prototype.next = function next() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.next(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Cursor.prototype.rewind = function rewind() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.rewind(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Cursor.prototype.toArray = function toArray() {
  var _parent = this._parent
  if (this._promise) return this._promise;
  return this._promise = new Promise(function (resolve, reject) {
    _parent.toArray(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Cursor.prototype.map = function map(mapfn) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.map(mapfn, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Cursor.prototype.forEach = function forEach(fn) {
  return this._parent.forEach(fn);
};

Cursor.prototype.count = function count() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.count(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Cursor.prototype.size = function size() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.size(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Cursor.prototype.explain = function explain() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.explain(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Cursor.prototype.destroy = function destroy() {
  return this._parent.destroy();
};

Cursor.prototype.batchSize = function batchSize(obj) {
  this._parent.batchSize(obj);
  return this;
};

Cursor.prototype.hint = function hint(obj) {
  this._parent.hint(obj);
  return this;
};

Cursor.prototype.limit = function limit(obj) {
  this._parent.limit(obj);
  return this;
};

Cursor.prototype.maxTimeMS = function maxTimeMS(obj) {
  this._parent.maxTimeMS(obj);
  return this;
};

Cursor.prototype.max = function max(obj) {
  this._parent.max(obj);
  return this;
};

Cursor.prototype.min = function min(obj) {
  this._parent.min(obj);
  return this;
};

Cursor.prototype.skip = function skip(obj) {
  this._parent.skip(obj);
  return this;
};

Cursor.prototype.snapshot = function snapshot(obj) {
  this._parent.snapshot(obj);
  return this;
};

Cursor.prototype.sort = function sort(obj) {
  this._parent.sort(obj);
  return this;
};

// Event Emitter

Cursor.prototype.addListener = function addListener() {
  return this._parent.addListener.apply(this._parent, arguments);
};

Cursor.prototype.emit = function emit() {
  return this._parent.emit.apply(this._parent, arguments);
};

Cursor.prototype.getMaxListeners = function getMaxListeners() {
  return this._parent.getMaxListeners.apply(this._parent, arguments);
};

Cursor.prototype.listenerCount = function listenerCount() {
  return this._parent.listenerCount.apply(this._parent, arguments);
};

Cursor.prototype.listeners = function listeners() {
  return this._parent.listeners.apply(this._parent, arguments);
};

Cursor.prototype.on = function on() {
  return this._parent.on.apply(this._parent, arguments);
};

Cursor.prototype.once = function once() {
  return this._parent.once.apply(this._parent, arguments);
};

Cursor.prototype.removeAllListeners = function removeAllListeners() {
  return this._parent.removeAllListeners.apply(this._parent, arguments);
};

Cursor.prototype.removeListener = function removeListener() {
  return this._parent.removeListener.apply(this._parent, arguments);
};

Cursor.prototype.setMaxListeners = function setMaxListeners() {
  return this._parent.setMaxListeners.apply(this._parent, arguments);
};

// Readable Stream

Cursor.prototype.isPaused = function isPaused() {
  return this._parent.isPaused.apply(this._parent, arguments);
};

Cursor.prototype.pause = function pause() {
  return this._parent.pause.apply(this._parent, arguments);
};

Cursor.prototype.pipe = function pipe() {
  return this._parent.pipe.apply(this._parent, arguments);
};

Cursor.prototype.read = function read() {
  return this._parent.read.apply(this._parent, arguments);
};

Cursor.prototype.resume = function resume() {
  return this._parent.resume.apply(this._parent, arguments);
};

Cursor.prototype.setEncoding = function setEncoding() {
  return this._parent.setEncoding.apply(this._parent, arguments);
};

Cursor.prototype.unpipe = function unpipe() {
  return this._parent.unpipe.apply(this._parent, arguments);
};

Cursor.prototype.unshift = function unshift() {
  return this._parent.unshift.apply(this._parent, arguments);
};

// Promise Methods

Cursor.prototype.catch = function () {
  var _promise = this.toArray();
  return _promise.catch.apply(_promise, arguments);
};

Cursor.prototype.done = function () {
  var _promise = this.toArray();
  return _promise.done.apply(_promise, arguments);
};

Cursor.prototype.finally = function () {
  var _promise = this.toArray();
  return _promise.finally.apply(_promise, arguments);
};

Cursor.prototype.nodeify = function () {
  var _promise = this.toArray();
  return _promise.nodeify.apply(_promise, arguments);
};

Cursor.prototype.then = function () {
  var _promise = this.toArray();
  return _promise.then.apply(_promise, arguments);
};
