/**
 * WARNING: This file is autogenerated by `build.js` from in `/schema/`collection.js
 */

var Promise = require("promise");
var Bulk = require("./bulk");
var Cursor = require("./cursor");

module.exports = Collection;
function Collection(_parent) {
  this._parent = _parent;
}

Collection.prototype.find = function find(query, projection, opts) {
  return new Cursor(this._parent.find(query === undefined ? {} : query, projection === undefined ? null : projection, opts === undefined ? null : opts));
};

Collection.prototype.findOne = function findOne(query, projection) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.findOne(query === undefined ? {} : query, projection === undefined ? null : projection, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.findAndModify = function findAndModify(opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.findAndModify(opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.count = function count(query) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.count(query === undefined ? {} : query, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.distinct = function distinct(field, query) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.distinct(field, query, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.insert = function insert(docOrDocs, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.insert(docOrDocs, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.update = function update(query, update, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.update(query, update, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.save = function save(doc, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.save(doc, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.remove = function remove(query, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.remove(query === undefined ? {} : query, opts === undefined ? {"justOne":false} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.rename = function rename(name, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.rename(name, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.drop = function drop() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.drop(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.stats = function stats() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.stats(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.mapReduce = function mapReduce(map, reduce, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.mapReduce(map, reduce, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.runCommand = function runCommand(cmd, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.runCommand(cmd, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.toString = function toString() {
  return this._parent.toString();
};

Collection.prototype.dropIndexes = function dropIndexes() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.dropIndexes(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.dropIndex = function dropIndex(index) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.dropIndex(index, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.createIndex = function createIndex(index, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.createIndex(index, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.ensureIndex = function ensureIndex(index, opts) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.ensureIndex(index, opts === undefined ? {} : opts, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.getIndexes = function getIndexes() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.getIndexes(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.reIndex = function reIndex() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.reIndex(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.isCapped = function isCapped() {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.isCapped(function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.group = function group(doc) {
  var _parent = this._parent
  return new Promise(function (resolve, reject) {
    _parent.group(doc, function (err, res) { err ? reject(err) : resolve(res) });
  });
};

Collection.prototype.aggregate = function aggregate() {
  return new Cursor(this._parent.aggregate.apply(this._parent, arguments));
};

Collection.prototype.initializeOrderedBulkOp = function initializeOrderedBulkOp() {
  return new Bulk(this._parent.initializeOrderedBulkOp());
};

Collection.prototype.initializeUnorderedBulkOp = function initializeUnorderedBulkOp() {
  return new Bulk(this._parent.initializeUnorderedBulkOp());
};
