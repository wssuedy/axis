import { Domain } from "cqrs";
import EventStore from "cqrs/dist/lib/EventStore";
import { Application, Request, Response, Router, NextFunction, RequestHandler } from "express";
import { readdirSync } from "fs";
import path = require("path");

export interface Option {
  app: Application;
  baseUrl?: string;
  createInterceptor?: RequestHandler | RequestHandler[];
  callInterceptor?: RequestHandler | RequestHandler[];
  actorPath?: string;
  listenerPath?: string;
  eventstore?: EventStore;
}

export default function createMiddel(opt: Option): Domain {
  const eventstore = opt.eventstore;
  const domain = new Domain(opt);
  const app = opt.app;
  const baseUrl = opt.baseUrl || "/domain";
  const actorPath = opt.actorPath || "actors";
  const listenerPath = opt.listenerPath || "listeners";
  const createInterceptor = opt.createInterceptor || [];
  const callInterceptor = opt.callInterceptor || [];
  const ActorList = readdirSync(actorPath);
  let listeners: string[] = [];
  try {
    listeners = readdirSync(listenerPath);
  } catch (err) { }

  ActorList.filter(Actor => /.*\.js$/.test(Actor)).forEach(Actor => domain.register(require(path.join(actorPath, Actor))));
  listeners.filter(listener => /.*\.js$/.test(listener)).forEach(listener => require(path.join(listenerPath, listener))(domain));

  const addDomain = <RequestHandler>function(req: any, res, next) {
    req.$domain = domain;
    next();
  }

  const router = Router();
  app.use(addDomain);
  router.use(addDomain);
  // create
  router.post("/:actor/create", <RequestHandler>function(req: any, res, next) {
    req.type = req.params.actor;
    req.data = req.body;
    next();
  }, createInterceptor, <RequestHandler>async function(req, res) {
    try {
      const act = await domain.create(req.params.actor, req.body);
      res.send({ id: act.id });
    } catch (error) {
      res.send({ error });
    }
  });
  // call
  router.post("/:actor/:id/:method",
    <RequestHandler>async function(req: any, res, next) {
      req.type = req.params.actor;
      req.data = req.body;
      req.id = req.params.id;
      req.methodName = req.params.method;
      next();
    },
    callInterceptor, <RequestHandler>async function(req, res) {
      try {
        const act = await domain.get(req.params.actor, req.params.id);
        const args = [].concat(req.body);
        res.send(await act[req.params.method](...args));
      } catch (error) {
        res.send({ error });
      }
    });
  app.use(baseUrl, router);
  return domain;
}
