"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cqrs_1 = require("cqrs");
const express_1 = require("express");
const fs_1 = require("fs");
const path = require("path");
function createMiddel(opt) {
    const eventstore = opt.eventstore;
    const domain = new cqrs_1.Domain(opt);
    const app = opt.app;
    const baseUrl = opt.baseUrl || "/domain";
    const actorPath = opt.actorPath || "actors";
    const listenerPath = opt.listenerPath || "listeners";
    const createInterceptor = opt.createInterceptor || [];
    const callInterceptor = opt.callInterceptor || [];
    const ActorList = fs_1.readdirSync(actorPath);
    let listeners = [];
    try {
        listeners = fs_1.readdirSync(listenerPath);
    }
    catch (err) { }
    ActorList.filter(Actor => /.*\.js$/.test(Actor)).forEach(Actor => domain.register(require(path.join(actorPath, Actor))));
    listeners.filter(listener => /.*\.js$/.test(listener)).forEach(listener => require(path.join(listenerPath, listener))(domain));
    const addDomain = function (req, res, next) {
        req.$domain = domain;
        next();
    };
    const router = express_1.Router();
    app.use(addDomain);
    router.use(addDomain);
    router.post("/:actor/create", function (req, res, next) {
        req.type = req.params.actor;
        req.data = req.body;
        next();
    }, createInterceptor, async function (req, res) {
        try {
            const act = await domain.create(req.params.actor, req.body);
            res.send({ id: act.id });
        }
        catch (error) {
            res.send({ error });
        }
    });
    router.post("/:actor/:id/:method", async function (req, res, next) {
        req.type = req.params.actor;
        req.data = req.body;
        req.id = req.params.id;
        req.methodName = req.params.method;
        next();
    }, callInterceptor, async function (req, res) {
        try {
            const act = await domain.get(req.params.actor, req.params.id);
            const args = [].concat(req.body);
            res.send(await act[req.params.method](...args));
        }
        catch (error) {
            res.send({ error });
        }
    });
    app.use(baseUrl, router);
    return domain;
}
exports.default = createMiddel;
//# sourceMappingURL=index.js.map